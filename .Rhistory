names_from = "parameter",
values_from = "value") |>
ggplot(aes(x = log(m), y = log(sd))) +
# ggplot(aes(x = m, y = sd)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_point(aes(color = author)) +
scale_x_continuous(limits = c(2.5,9)) +
scale_y_continuous(limits = c(2.5,9))
## No random slopes
### Uncentred predictors
model <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length * site,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model
### Centred predictors
model_centred <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length_centred * site_centred,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model_centred
## No random slopes
### Uncentred predictors
model <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length + site,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model
### Centred predictors
model_centred <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length_centred + site_centred,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model_centred
## No random slopes
### Uncentred predictors
model <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length:site,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model
### Centred predictors
model_centred <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length_centred:site_centred,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model_centred
## No random slopes
### Uncentred predictors
model <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length * site,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model
### Centred predictors
model_centred <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length_centred * site_centred,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model_centred
regplot(model_centred, mod = "mean_muscle_length_centred")
regplot(model, mod = "mean_muscle_length")
install.packages("bayestestR")
library(bayestestR)
### Compare the models
BF_mean_models <- bayesfactor_models(model, model_centred)
BF_mean_models
## With random slopes
### Uncentred predictors
model_slopes <- rma.mv(yi, vi,
random = list(~ mean_muscle_length * site | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length * site,
data = data,
struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
## With random slopes
### Uncentred predictors
model_slopes <- rma.mv(yi, vi,
random = list(~ mean_muscle_length * site | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length * site,
data = data,
struct = "GEN",
control=list(optimizer="nloptr", maxeval=1000)
)
model_slopes
regplot(model_slopes, mod = "mean_muscle_length")
## With random slopes
### Uncentred predictors
model_slopes <- rma.mv(yi, vi,
random = list(~ mean_muscle_length + site | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length * site,
data = data,
struct = "GEN",
control=list(optimizer="nloptr", maxeval=1000)
)
model_slopes
regplot(model_slopes, mod = "mean_muscle_length")
regplot(model_slopes, mod = "site")
### Centred predictors
model_centred_slopes <- rma.mv(yi, vi,
random = list(~ mean_muscle_length_centred * site_centred | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length_centred * site_centred,
data = data,
struct = "GEN",
control=list(optimizer="nloptr", maxeval=1000)
)
model_centred_slopes
regplot(model_centred_slopes, mod = "mean_muscle_length_centred")
regplot(model_centred_slopes, mod = "site_centred")
### Centred predictors
model_centred_slopes <- rma.mv(yi, vi,
random = list(~ mean_muscle_length_centred + site_centred | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length_centred * site_centred,
data = data,
struct = "GEN",
control=list(optimizer="nloptr", maxeval=1000)
)
model_centred_slopes
regplot(model_centred_slopes, mod = "mean_muscle_length_centred")
regplot(model_centred_slopes, mod = "site_centred")
### Compare the models
BF_mean_models <- bayesfactor_models(model, model_centred, model_slopes, model_centred_slopes)
BF_mean_models
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:7, BF_2log) %>%
rownames_to_column("Denominator") %>%
pivot_longer(2:8, names_to = "Numerator", values_to = "logBF")
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:7, BF_2log) %>%
rownames_to_column("Denominator") %>%
pivot_longer(2:6, names_to = "Numerator", values_to = "logBF")
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:7, BF_2log) %>%
rownames_to_column("Denominator") %>%
pivot_longer(2:5, names_to = "Numerator", values_to = "logBF")
BF_2log <- function(x) (2*x)
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:7, BF_2log) %>%
rownames_to_column("Denominator") %>%
pivot_longer(2:5, names_to = "Numerator", values_to = "logBF")
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:5, BF_2log) %>%
rownames_to_column("Denominator") %>%
pivot_longer(2:6, names_to = "Numerator", values_to = "logBF")
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:5, BF_2log)
as.data.frame(as.matrix(BF_mean_models))
as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:5, BF_2log)
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:4, BF_2log) %>%
rownames_to_column("Denominator") %>%
pivot_longer(2:5, names_to = "Numerator", values_to = "logBF")
as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:4, BF_2log)
### Compare the models
BF_mean_models <- bayesfactor_models(model, model_centred, model_slopes, model_centred_slopes)
BF_2log <- function(x) (2*x)
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))  %>%
mutate_at(1:4, BF_2log) %>%
rownames_to_column("Denominator") %>%
pivot_longer(2:5, names_to = "Numerator", values_to = "logBF")
BF_mean_models <- as.data.frame(as.matrix(BF_mean_models))
View(BF_mean_models)
conditional_effects(model_centred_slopes, "mean_muscle_length_centred:site_centred", re_formula = NA)
model_centred_slopes
0.0027*100
0.0027*30
model
model_centred
model_slopes
model_centred_slopes
data |>
ggplot(aes(x=mean_muscle_length, y=yi, group=study_number)) +
geom_point()
data |>
ggplot(aes(x=mean_muscle_length, y=yi, group=study_number)) +
geom_point() +
geom_smooth()
data |>
ggplot(aes(x=mean_muscle_length, y=yi, group=study_number)) +
geom_point() +
geom_smooth(method = "lm")
data |>
ggplot(aes(x=mean_muscle_length, y=yi, group=study_number)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE)
data |>
filter(author == "McMahon et al") |>
ggplot(aes(x=mean_muscle_length, y=yi, group=study_number)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE)
install.packages("sjPlot")
plot_model(model_centred, type = "pred", terms = c("mean_muscle_length_centred", "site_centred"))
sjPlot::plot_model(model_centred, type = "pred", terms = c("mean_muscle_length_centred", "site_centred"))
# Read in data and prepare
data <- read.csv("data/ROM_regional_hypertrophy_data.csv", dec = ",") |>
clean_names() |>
# add code for each arm; note "within" designs have mutliple conditions but a single group
mutate(arm_number = if_else(design == "Within", paste(study_number, design), paste(study_number,group)),
arm_number = as.factor(unclass(factor(unlist(arm_number))))) |>
# add code for effects
rowid_to_column("effect_number") |>
# convert means/sds to numeric
mutate(m_pre = as.numeric(m_pre),
m_post = as.numeric(m_post),
sd_pre = as.numeric(sd_pre),
sd_post = as.numeric(sd_post),
mean_muscle_length = as.numeric(mean_muscle_length)*100
) |>
# rescale muscle length and centre along with site
mutate(mean_muscle_length_centred = (mean_muscle_length)-50,
site_centred = site-50) |>
# add assumed pre-post correlation
mutate(ri = 0.7)
# Calculate standardised effects
data <- escalc(
measure = "SMCRH",
m1i = m_post,
m2i = m_pre,
sd1i = sd_post,
sd2i = sd_pre,
ri = ri,
ni = n,
data = data
)
## No random slopes
### Uncentred predictors
model <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length * site,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model
regplot(model, mod = "mean_muscle_length")
regplot(model, mod = "site")
### Centred predictors
model_centred <- rma.mv(yi, vi,
random = list(~ 1 | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length_centred * site_centred,
data = data,
# struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model_centred
regplot(model_centred, mod = "mean_muscle_length_centred")
regplot(model_centred, mod = "site_centred")
## With random slopes
### Uncentred predictors
model_slopes <- rma.mv(yi, vi,
random = list(~ mean_muscle_length + site | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length * site,
data = data,
struct = "GEN",
control=list(optimizer="nloptr", maxeval=1000)
)
model_slopes
regplot(model_slopes, mod = "mean_muscle_length")
## With random slopes
### Uncentred predictors
model_slopes <- rma.mv(yi, vi,
random = list(~ mean_muscle_length + site | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length * site,
data = data,
struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model_slopes
regplot(model_slopes, mod = "mean_muscle_length")
regplot(model_slopes, mod = "site")
### Centred predictors
model_centred_slopes <- rma.mv(yi, vi,
random = list(~ mean_muscle_length_centred + site_centred | study_number, ~ 1 | arm_number, ~1 | effect_number),
mods = ~ mean_muscle_length_centred * site_centred,
data = data,
struct = "GEN",
# control=list(optimizer="nloptr", maxeval=1000)
)
model_centred_slopes
regplot(model_centred_slopes, mod = "mean_muscle_length_centred")
regplot(model_centred_slopes, mod = "site_centred")
regplot(model_centred_slopes, mod = "mean_muscle_length_centred")
model_centred
View(data)
# Taken from Wolf et al. (2022) overall estimate
# Read csv as data frame into environment - Note: change source address
data_wolf <- read.csv("data/wolf_et_al_meta_data.csv", na.strings=c(""," ","NA"))
# add within group correlations assumptions
# NOTE - change and rerun to check with 0.5 and 0.9
data_wolf$ri70 <- as.numeric(strrep(0.7, 1))
### Standardised effect size calculations
# Pooled baseline SD
data_wolf$SD_pool <- (((data_wolf$FULL_ni - 1)*data_wolf$FULL_sd_pre) + ((data_wolf$PART_ni - 1)*data_wolf$PART_sd_pre)) / (data_wolf$FULL_ni + data_wolf$PART_ni - 2)
# Effects for measures where increase is good
data_wolf_increase <- subset(data_wolf, increase_decrease == "increase")
data_wolf_increase_int <- escalc(measure="SMCR", m1i=FULL_m_post,
m2i=FULL_m_pre, sd1i=SD_pool, ni=FULL_ni, ri=ri70, data = data_wolf_increase)
data_wolf_increase_con <- escalc(measure="SMCR", m1i=PART_m_post,
m2i=PART_m_pre, sd1i=SD_pool, ni=PART_ni, ri=ri70, data = data_wolf_increase)
data_wolf_increase$yi <- (data_wolf_increase_int$yi - data_wolf_increase_con$yi)
data_wolf_increase$vi <- (data_wolf_increase_int$vi + data_wolf_increase_con$vi)
data_wolf_increase$lnRR_yi <- log(data_wolf_increase$FULL_m_post/data_wolf_increase$FULL_m_pre) - log(data_wolf_increase$PART_m_post/data_wolf_increase$PART_m_pre)
data_wolf_increase$lnRR_vi <- (data_wolf_increase$FULL_sd_post^2/(data_wolf_increase$FULL_m_post^2*data_wolf_increase$FULL_ni)) + (data_wolf_increase$FULL_sd_pre^2/(data_wolf_increase$FULL_sd_post^2*data_wolf_increase$FULL_ni)) + (data_wolf_increase$PART_sd_post^2/(data_wolf_increase$PART_m_post^2*data_wolf_increase$PART_ni)) + (data_wolf_increase$PART_sd_pre^2/(data_wolf_increase$PART_m_pre^2*data_wolf_increase$PART_ni))
# Effects for measures where increase is good
data_wolf_decrease <- subset(data_wolf, increase_decrease == "decrease")
data_wolf_decrease_int <- escalc(measure="SMCR", m1i=FULL_m_pre,
m2i=FULL_m_post, sd1i=SD_pool, ni=FULL_ni, ri=ri70, data = data_wolf_decrease)
data_wolf_decrease_con <- escalc(measure="SMCR", m1i=PART_m_pre,
m2i=PART_m_post, sd1i=SD_pool, ni=PART_ni, ri=ri70, data = data_wolf_decrease)
data_wolf_decrease$yi <- (data_wolf_decrease_int$yi - data_wolf_decrease_con$yi)
data_wolf_decrease$vi <- (data_wolf_decrease_int$vi + data_wolf_decrease_con$vi)
data_wolf_decrease$lnRR_yi <- log(data_wolf_decrease$PART_m_post/data_wolf_decrease$PART_m_pre) - log(data_wolf_decrease$FULL_m_post/data_wolf_decrease$FULL_m_pre)
data_wolf_decrease$lnRR_vi <- (data_wolf_decrease$FULL_sd_post^2/(data_wolf_decrease$FULL_m_post^2*data_wolf_decrease$FULL_ni)) + (data_wolf_decrease$FULL_sd_pre^2/(data_wolf_decrease$FULL_sd_post^2*data_wolf_decrease$FULL_ni)) + (data_wolf_decrease$PART_sd_post^2/(data_wolf_decrease$PART_m_post^2*data_wolf_decrease$PART_ni)) + (data_wolf_decrease$PART_sd_pre^2/(data_wolf_decrease$PART_m_pre^2*data_wolf_decrease$PART_ni))
data_wolf_effects <- rbind(data_wolf_increase, data_wolf_decrease) %>%
mutate(se = sqrt(vi),
lnRR_se = sqrt(lnRR_vi),
wi = 1/sqrt(vi),
size = 0.5 + 3 * (wi - min(wi, na.rm = TRUE))/(max(wi, na.rm = TRUE) - min(wi, na.rm = TRUE)),
lnRR_wi = 1/sqrt(lnRR_vi),
lnRR_size = 0.5 + 3 * (lnRR_wi - min(lnRR_wi, na.rm = TRUE))/(max(lnRR_wi, na.rm = TRUE) - min(lnRR_wi, na.rm = TRUE)))
# Muscle Length - Hypertrophy
data_wolf_effects_hypertrophy <- data_wolf_effects %>%
mutate(muscle_length = as.factor(muscle_length)) %>%
filter(outcome_subcategory == "muscle_size")
muscle_length_hypertrophy_model <- brm(yi|se(se) ~ 1 + muscle_length + (1 | study) + (1|group),
data=data_wolf_effects_hypertrophy,
chains = parallel::detectCores()-1,
cores = parallel::detectCores()-1,
seed = 1988,
warmup = 2000,
iter = 8000,
control = list(adapt_delta = 0.99)
)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores()-1)
library(janitor)
library(metafor)
library(brms)
library(bayestestR)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores()-1)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores()-1)
muscle_length_hypertrophy_model <- brm(yi|se(se) ~ 1 + muscle_length + (1 | study) + (1|group),
data=data_wolf_effects_hypertrophy,
chains = parallel::detectCores()-1,
cores = parallel::detectCores()-1,
seed = 1988,
warmup = 2000,
iter = 6000,
control = list(adapt_delta = 0.99)
)
muscle_length_hypertrophy_model <- brm(yi|se(se) ~ 1 + muscle_length + (1 | study) + (1|group),
data=data_wolf_effects_hypertrophy,
chains = 4,
cores = 4,
seed = 1988,
warmup = 2000,
iter = 6000,
control = list(adapt_delta = 0.99)
)
plot(muscle_length_hypertrophy_model)
muscle_length_hypertrophy_model
data_wolf_effects_hypertrophy$muscle_length
View(data_wolf_effects_hypertrophy)
draws <- muscle_length_hypertrophy_model |>
spread_draws(muscle_lengthshort)
install.packages(tidybayes)
install.packages("tidybayes")
draws <- muscle_length_hypertrophy_model |>
spread_draws(muscle_lengthshort)
library(tidybayes)
draws <- muscle_length_hypertrophy_model |>
spread_draws(muscle_lengthshort)
draws <- muscle_length_hypertrophy_model |>
spread_draws(b_muscle_lengthshort)
head(draws)
posterior <- MASS::fitdistr(draws$b_muscle_lengthshort, "t")$estimate
posterior <- MASS::fitdistr(draws$b_muscle_lengthshort, "t")$estimate/100
main_model_prior <-
c(
set_prior(paste("student_t(",posterior[3],",", posterior[1],",", posterior[2],")"), class = "b", coef = "mean_muscle_length_centred"),
set_prior("student_t(3, 0.34, 0.025)", class = "Intercept")
)
main_model_prior
draws |>
ggplot(aes(x=b_muscle_lengthshort)) +
stat_slabinterval()
draws |>
ggplot(aes(x=b_muscle_lengthshort/100)) +
stat_slabinterval()
# Muscle Length - Hypertrophy
data_wolf_effects_hypertrophy <- data_wolf_effects %>%
mutate(muscle_length = as.factor(muscle_length)) %>%
filter(outcome_subcategory == "muscle_size" & percent_distal == 0.5)
muscle_length_hypertrophy_model <- brm(yi|se(se) ~ 1 + muscle_length + (1 | study) + (1|group),
data=data_wolf_effects_hypertrophy,
chains = 4,
cores = 4,
seed = 1988,
warmup = 2000,
iter = 6000,
control = list(adapt_delta = 0.99)
)
draws <- muscle_length_hypertrophy_model |>
spread_draws(b_muscle_lengthshort)
posterior <- MASS::fitdistr(draws$b_muscle_lengthshort, "t")$estimate/100
draws |>
ggplot(aes(x=b_muscle_lengthshort/100)) +
stat_slabinterval()
posterior
get_prior(yi | se(sqrt(vi)) ~ mean_muscle_length_centred * site_centred +
(mean_muscle_length_centred + site_centred| study_number) +
(1 | arm_number) +
(1 | effect_number),
data = data)
main_model_prior <-
c(
# set_prior(paste("student_t(",posterior[3],",", posterior[1],",", posterior[2],")"), class = "b", coef = "mean_muscle_length_centred"),
set_prior("student_t(3, 0.34, 0.025)", class = "Intercept"),
set_prior("student_t(3, 0.21, 0.025)", class = "sd", coef = "Intercept", group = "study_number")
)
main_model_w_prior <-
brm(
yi | se(sqrt(vi)) ~ mean_muscle_length_centred * site_centred +
(mean_muscle_length_centred + site_centred| study_number) +
(1 | arm_number) +
(1 | effect_number),
data = data,
prior = main_model_prior,
chains = 4,
cores = 4,
seed = 1988,
warmup = 2000,
iter = 8000,
control = list(adapt_delta = 0.99),
sample_prior = TRUE
)
get_variables(main_model_w_prior)
draws <- main_model_w_prior |>
spread_draws(sd_study_number__Intercept)
draws |>
ggplot(aes(x=sd_study_number__Intercept)) +
stat_slabinterval()
main_model_w_prior <-
brm(
yi | se(sqrt(vi)) ~ mean_muscle_length_centred * site_centred +
(mean_muscle_length_centred + site_centred| study_number) +
(1 | arm_number) +
(1 | effect_number),
data = data,
prior = main_model_prior,
chains = 4,
cores = 4,
seed = 1988,
warmup = 2000,
iter = 8000,
control = list(adapt_delta = 0.99)
)
main_model_w_prior
conditional_effects(main_model_w_prior, "mean_muscle_length_centred:site_centred", re_formula = NA)
conditional_effects(main_model_w_prior, "mean_muscle_length_centred", re_formula = NULL)
conditional_effects(main_model_w_prior, "mean_muscle_length_centred", re_formula = NA)
conditional_effects(main_model_w_prior, "site_centred", re_formula = NULL)
conditional_effects(main_model_w_prior, "mean_muscle_length_centred:site_centred", re_formula = NA)
conditional_effects(main_model_w_prior, "mean_muscle_length_centred", re_formula = NA, points = TRUE)
a <- conditional_effects(main_model_w_prior, "mean_muscle_length_centred", re_formula = NA)
plot(a, points = TRUE)
c <- conditional_effects(main_model_w_prior, "mean_muscle_length_centred:site_centred", re_formula = NA)
plot(c, points = TRUE)
a <- conditional_effects(main_model_w_prior, "mean_muscle_length_centred", re_formula = NA)
plot(a, points = TRUE)
targets::tar_load(main_model)
library(brms)
plot(main_model)
pp_check(main_model)
targets::tar_make()
targets::tar_load(main_model_r_slopes)
a <- conditional_effects(main_model_r_slopes, "mean_muscle_length_centred", re_formula = NA)
plot(a, points = TRUE)
b <- conditional_effects(main_model_r_slopes, "site_centred", re_formula = NA)
plot(b, points = TRUE)
c <- conditional_effects(main_model_r_slopes, "mean_muscle_length_centred:site_centred", re_formula = NA)
plot(c, points = TRUE)
